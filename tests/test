#!/bin/bash

PUSH_SWAP="../push_swap/push_swap"
CHECKER="./checker_Mac"

print_header() {
    printf "\n\033[1;36m═══════════════════════════════════════════════════\033[0m\n"
    printf "        \033[1;37m$1\033[0m\n"
    printf "\033[1;36m═══════════════════════════════════════════════════\033[0m\n\n"
}

run_tests() {
    local TESTS=$1
    local NUMBERS=$2
    local INT_MIN=-10000
    local INT_MAX=10000
    local total_moves=0
    print_header "Testing $NUMBERS elements ($TESTS runs)"

    local failed_tests=()
    for ((i=1; i<=TESTS; i++)); do
		SHUF=$(command -v gshuf || command -v shuf)
		args=$(generate_unique_numbers $NUMBERS $INT_MIN $INT_MAX)
		if [[ -z "$args" ]]; then
			echo -e "\e[31m[ERROR] Failed to generate args for $NUMBERS elements\e[0m"
			exit 1
		fi
        output=$($PUSH_SWAP $args)
		if [ -z "$output" ]; then
			moves=0
			result=$(echo -n "" | $CHECKER $args)
		else
			moves=$(echo "$output" | wc -l)
			result=$(echo "$output" | $CHECKER $args)
		fi

		if [[ $result != "OK" ]]; then
			printf "    \e[38;5;196m[  0%%]\e[0m "
			failed_tests+=("$i:$args:$moves")
			moves=$((moves + 100000))
			printf "\n\e[31m[DEBUG] push_swap output:\e[0m\n$output\n"
        else
            if (( NUMBERS <= 3 )); then
                if   (( moves < 6 ));     then printf "    \e[38;5;82m[100%%]\e[0m "
                elif (( moves < 8 ));     then printf "    \e[38;5;45m[ 80%%]\e[0m "
                elif (( moves < 10 ));    then printf "    \e[38;5;214m[ 60%%]\e[0m "
                else                           printf "    \e[38;5;196m[  0%%]\e[0m "
                fi
            elif (( NUMBERS <= 10 )); then
                if   (( moves < 40 ));    then printf "    \e[38;5;82m[100%%]\e[0m "
                elif (( moves < 50 ));    then printf "    \e[38;5;45m[ 80%%]\e[0m "
                elif (( moves < 60 ));    then printf "    \e[38;5;214m[ 60%%]\e[0m "
                else                           printf "    \e[38;5;196m[  0%%]\e[0m "
                fi
            elif (( NUMBERS <= 100 )); then
                if   (( moves < 700 ));   then printf "    \e[38;5;82m[100%%]\e[0m "
                elif (( moves < 1100 ));  then printf "    \e[38;5;45m[ 80%%]\e[0m "
                elif (( moves < 1300 ));  then printf "    \e[38;5;214m[ 60%%]\e[0m "
                else                           printf "    \e[38;5;196m[  0%%]\e[0m "
                fi
            elif (( NUMBERS <= 500 )); then
                if   (( moves < 5500 ));  then printf "    \e[38;5;82m[100%%]\e[0m "
                elif (( moves < 8500 ));  then printf "    \e[38;5;45m[ 80%%]\e[0m "
                elif (( moves < 11500 )); then printf "    \e[38;5;214m[ 60%%]\e[0m "
                else                           printf "    \e[38;5;196m[  0%%]\e[0m "
                fi
            fi
        fi

        total_moves=$((total_moves + moves))

        if (( i % 5 == 0 )); then echo; fi
    done

    avg=$((total_moves / TESTS))
    printf "\n\033[1;36m───────────────────────────────────────────────────\033[0m\n"
    printf "   ➔ \033[1;35mAverage moves:\033[0m %d\n" "$avg"

	if (( ${#failed_tests[@]} > 0 )); then
		printf "   ➔ \e[38;5;196mFailed tests:\e[0m\n"
		for fail in "${failed_tests[@]}"; do
			printf "      • %s\n" "$fail"
		done
	fi

    local result="FAIL"
	if (( NUMBERS <= 3 )); then
        if (( avg < 6 )); then result="PASS 100%"
        elif (( avg < 8 )); then result="PASS 80%"
        elif (( avg < 10 )); then result="PASS 80%"
        fi
	elif (( NUMBERS <= 10 )); then
        if (( avg < 40 )); then result="PASS 100%"
        elif (( avg < 50 )); then result="PASS 80%"
        elif (( avg < 60 )); then result="PASS 80%"
        fi
    elif (( NUMBERS <= 100 )); then
        if (( avg < 700 )); then result="PASS 100%"
        elif (( avg < 1100 )); then result="PASS 80%"
        elif (( avg < 1300 )); then result="PASS 80%"
        fi
    elif (( NUMBERS <= 500 )); then
        if (( avg < 5500 )); then result="PASS 100%"
        elif (( avg < 8500 )); then result="PASS 80%"
        elif (( avg < 11500 )); then result="PASS 80%"
        fi
    fi

    case "$result" in
        "PASS 100%") printf "   ➔ \e[38;5;82m[PASS 100%%]\e[0m Meets full 42 benchmark\n";;
        "PASS 80%")  printf "   ➔ \e[38;5;214m[PASS 80%%]\e[0m Meets minimal 42 benchmark\n";;
        *)           printf "   ➔ \e[38;5;196m[FAIL]\e[0m Does not meet 42 benchmark\n";;
    esac
    printf "\033[1;36m═══════════════════════════════════════════════════\033[0m\n\n"
}
generate_unique_numbers() {
    local n=$1
    local min=$2
    local max=$3
    local range=()
    
    for ((i=min; i<=max; i++)); do
        range+=($i)
    done
    echo "${range[@]}" | tr ' ' '\n' | shuf | head -n $n | tr '\n' ' '
}

test_invalid_inputs() {
    print_header "Testing invalid inputs"

    declare -a invalid_tests=(
        "42 42"
        "4 two 3"
        ""
        "1 2 a"
        "2147483648"
        "-2147483649"
        "3 2 1 0 -0"
		"0 -0"
		"42 +42"
		"001 1"
		"12a3"
		"1 2 '' 3"
		"1,2,3"
    )

    for input in "${invalid_tests[@]}"; do
        if [[ -z "$input" ]]; then
            ../push_swap/push_swap "" > out.txt 2>&1
        else
            ../push_swap/push_swap $input > out.txt 2>&1
        fi
        status=$?
        output=$(< out.txt)
        if [[ $status -ne 0 && "$output" == "Error" ]]; then
            printf "[\e[32mPASS\e[0m] Input: '%s'\n" "$input"
        else
            printf "[\e[31mFAIL\e[0m] Input: '%s'\n" "$input"
            printf "       ↳ Output: '%s' Status: %d\n" "$output" "$status"
        fi
    done
    rm -f out.txt
}

test_edge_cases() {
    print_header "Testing edge cases"

    declare -a cases=(
        "1 2 3 4 5"
		"1 2 3 5 4"
        "5 4 3 2 1"
        "2 1 3"
		"2 1"
		"2147483647"
		"-2147483648"
		"0"
		"-0"
		"0042"
    )

    for args in "${cases[@]}"; do
        result=$($PUSH_SWAP $args | $CHECKER $args)
        if [[ $result == "OK" ]]; then
            printf "\e[38;5;82m[PASS]\e[0m Case: '$args'\n"
        else
            printf "\e[38;5;196m[FAIL]\e[0m Case: '$args' (checker returned KO)\n"
        fi
    done

    printf "\n\033[1;36m═══════════════════════════════════════════════════\033[0m\n"
}

test_no_args() {
    print_header "Testing no arguments"

    output=$($PUSH_SWAP)
    if [[ -z "$output" ]]; then
        printf "\e[38;5;82m[PASS]\e[0m No output as expected\n"
    else
        printf "\e[38;5;196m[FAIL]\e[0m Unexpected output: '$output'\n"
    fi

    printf "\n\033[1;36m═══════════════════════════════════════════════════\033[0m\n"
}

test_memory_leaks() {
    print_header "Testing memory leaks"
    declare -a memory_tests=(
        "1 2 3 4 5"
        "5 4 3 2 1"
        "10 9 8 7 6 5 4 3 2 1"
        "-500 0 500 -1000 1000"
		""
		" "
		"	"
		"1 1 2 3"
		"2147483647"
		"-2147483648"
		"2147483648"
		"-2147483649"
		"1 2 3 4 5 6 7 8 9 10"
		"10 1 9 2 8 3 7 4 6 5"
		"1000 999 998 997 996"
		"1 2 a c 3"
		"a b c d e f"
		"2147483647 -2147483648 2147483649"
		"1 2 3 5, 8"
		"42"
    )

    for input in "${memory_tests[@]}"; do
        if [[ "$(uname)" == "Darwin" ]]; then
            leaks_output=$(leaks --atExit -- ../push_swap/push_swap $input 2>&1)
            leaks_summary=$(echo "$leaks_output" | grep -E "Process [0-9]+: [0-9]+ leaks")
            if echo "$leaks_summary" | grep -q "0 leaks"; then
                printf "[\e[32mPASS\e[0m] Memory test on input: '%s'\n" "$input"
            else
                printf "[\e[31mFAIL\e[0m] Memory leaks detected on input: '%s'\n" "$input"
                echo "────────────────────────────────────────────"
                echo "$leaks_summary"
                echo "────────────────────────────────────────────"
            fi
        else
            valgrind --leak-check=full --error-exitcode=42 \
                ../push_swap/push_swap $input > /dev/null 2> valgrind.log
            status=$?
            if [[ $status -eq 0 ]]; then
                printf "[\e[32mPASS\e[0m] Memory test on input: '%s'\n" "$input"
            else
                printf "[\e[31mFAIL\e[0m] Memory leaks detected on input: '%s'\n" "$input"
                echo "       ↳ Check valgrind.log for details."
                echo "────────────────────────────────────────────"
                grep -A20 -E "HEAP SUMMARY|LEAK SUMMARY" valgrind.log || cat valgrind.log
                echo "────────────────────────────────────────────"
            fi
        fi
    done

    rm -f valgrind.log 2>/dev/null || true
}

clear
run_tests 10 3
run_tests 10 5
run_tests 10 10
run_tests 10 50
run_tests 25 100
run_tests 25 500

test_invalid_inputs
test_edge_cases
test_no_args
test_memory_leaks
