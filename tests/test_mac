#!/bin/bash

PUSH_SWAP="../push_swap/push_swap"
CHECKER="./checker_Mac"

print_header() {
    printf "\n\033[1;36m═══════════════════════════════════════════════════\033[0m\n"
    printf "        \033[1;37m$1\033[0m\n"
    printf "\033[1;36m═══════════════════════════════════════════════════\033[0m\n\n"
}

run_tests() {
    local TESTS=$1
    local NUMBERS=$2
    local INT_MIN=-1000000
    local INT_MAX=1000000
    local total_moves=0

    print_header "Testing $NUMBERS elements ($TESTS runs)"

    local failed_tests=()
    for ((i=1; i<=TESTS; i++)); do
        args=$(seq $INT_MIN $INT_MAX | gshuf | head -n $NUMBERS | tr '\n' ' ')
        output=$($PUSH_SWAP $args 2>/dev/null)
        moves=$(echo "$output" | wc -l)
        result=$(echo "$output" | $CHECKER $args)

        if [[ $result != "OK" ]]; then
            printf "    \e[38;5;196m[  0%%]\e[0m "
            moves=$((moves + 100000))
            failed_tests+=("$i:$args")
        else
            if (( NUMBERS <= 3 )); then
                if   (( moves < 6 ));     then printf "    \e[38;5;82m[100%%]\e[0m "
                elif (( moves < 8 ));     then printf "    \e[38;5;45m[ 80%%]\e[0m "
                elif (( moves < 10 ));    then printf "    \e[38;5;214m[ 60%%]\e[0m "
                else                           printf "    \e[38;5;196m[  0%%]\e[0m "
                fi
            elif (( NUMBERS <= 10 )); then
                if   (( moves < 21 ));    then printf "    \e[38;5;82m[100%%]\e[0m "
                elif (( moves < 26 ));    then printf "    \e[38;5;45m[ 80%%]\e[0m "
                elif (( moves < 30 ));    then printf "    \e[38;5;214m[ 60%%]\e[0m "
                else                           printf "    \e[38;5;196m[  0%%]\e[0m "
                fi
            elif (( NUMBERS <= 100 )); then
                if   (( moves < 700 ));   then printf "    \e[38;5;82m[100%%]\e[0m "
                elif (( moves < 1100 ));  then printf "    \e[38;5;45m[ 80%%]\e[0m "
                elif (( moves < 1300 ));  then printf "    \e[38;5;214m[ 60%%]\e[0m "
                else                           printf "    \e[38;5;196m[  0%%]\e[0m "
                fi
            elif (( NUMBERS <= 500 )); then
                if   (( moves < 5500 ));  then printf "    \e[38;5;82m[100%%]\e[0m "
                elif (( moves < 8500 ));  then printf "    \e[38;5;45m[ 80%%]\e[0m "
                elif (( moves < 11500 )); then printf "    \e[38;5;214m[ 60%%]\e[0m "
                else                           printf "    \e[38;5;196m[  0%%]\e[0m "
                fi
            fi
        fi

        total_moves=$((total_moves + moves))

        if (( i % 5 == 0 )); then echo; fi
    done

    avg=$((total_moves / TESTS))
    printf "\n\033[1;36m───────────────────────────────────────────────────\033[0m\n"
    printf "   ➔ \033[1;35mAverage moves:\033[0m %d\n" "$avg"

	if (( ${#failed_tests[@]} > 0 )); then
		printf "   ➔ \e[38;5;196mFailed tests:\e[0m\n"
		for fail in "${failed_tests[@]}"; do
			printf "      • %s\n" "$fail"
		done
	fi

    local result="FAIL"
	if (( NUMBERS <= 3 )); then
        if (( avg < 6 )); then result="PASS 100%"
        elif (( avg < 8 )); then result="PASS 80%"
        elif (( avg < 10 )); then result="PASS 80%"
        fi
	elif (( NUMBERS <= 10 )); then
        if (( avg < 21 )); then result="PASS 100%"
        elif (( avg < 26 )); then result="PASS 80%"
        elif (( avg < 30 )); then result="PASS 80%"
        fi
    elif (( NUMBERS == 100 )); then
        if (( avg < 700 )); then result="PASS 100%"
        elif (( avg < 1100 )); then result="PASS 80%"
        elif (( avg < 1300 )); then result="PASS 80%"
        fi
    elif (( NUMBERS == 500 )); then
        if (( avg < 5500 )); then result="PASS 100%"
        elif (( avg < 8500 )); then result="PASS 80%"
        elif (( avg < 11500 )); then result="PASS 80%"
        fi
    fi

    case "$result" in
        "PASS 100%") printf "   ➔ \e[38;5;82m[PASS 100%%]\e[0m Meets full 42 benchmark\n";;
        "PASS 80%")  printf "   ➔ \e[38;5;214m[PASS 80%%]\e[0m Meets minimal 42 benchmark\n";;
        *)           printf "   ➔ \e[38;5;196m[FAIL]\e[0m Does not meet 42 benchmark\n";;
    esac
    printf "\033[1;36m═══════════════════════════════════════════════════\033[0m\n\n"
}

test_invalid_inputs() {
    print_header "Testing invalid inputs"

    declare -a invalid_tests=(
        "42 42"
        "4 two 3"
        ""
        "1 2 a"
        "2147483648"
        "-2147483649"
        "3 2 1 0 -0"
    )

    for test_case in "${invalid_tests[@]}"; do
        $PUSH_SWAP $test_case >/dev/null 2>&1
        if [[ $? -ne 0 ]]; then
            printf "\e[38;5;82m[PASS]\e[0m Input: '$test_case'\n"
        else
            printf "\e[38;5;196m[FAIL]\e[0m Input: '$test_case'\n"
        fi
    done
    printf "\n\033[1;36m═══════════════════════════════════════════════════\033[0m\n"
}

test_edge_cases() {
    print_header "Testing special cases with checker"

    declare -a cases=(
        "1 2 3 4 5"        # already sorted
        "5 4 3 2 1"        # reverse order
        "2 1 3"            # small input
    )

    for args in "${cases[@]}"; do
        result=$($PUSH_SWAP $args | $CHECKER $args)
        if [[ $result == "OK" ]]; then
            printf "\e[38;5;82m[PASS]\e[0m Case: '$args'\n"
        else
            printf "\e[38;5;196m[FAIL]\e[0m Case: '$args' (checker returned KO)\n"
        fi
    done

    printf "\n\033[1;36m═══════════════════════════════════════════════════\033[0m\n"
}

test_no_args() {
    print_header "Testing no arguments"

    output=$($PUSH_SWAP)
    if [[ -z "$output" ]]; then
        printf "\e[38;5;82m[PASS]\e[0m No output as expected\n"
    else
        printf "\e[38;5;196m[FAIL]\e[0m Unexpected output: '$output'\n"
    fi

    printf "\n\033[1;36m═══════════════════════════════════════════════════\033[0m\n"
}

run_tests 10 3
run_tests 10 5
run_tests 10 10
run_tests 10 50
run_tests 25 100
run_tests 25 500
test_invalid_inputs
test_edge_cases
test_no_args

